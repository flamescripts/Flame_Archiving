#!/opt/Autodesk/python/2025.0.1/bin/python3
#

################################################################################
#
# Filename: startApplication
#
# Copyright (c) 2021 Autodesk, Inc.
# All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
################################################################################

from __future__ import absolute_import, print_function

# Python 2/3 Support
try:
    unicode  # pylint: disable=unicode-builtin
except NameError:
    unicode = str  # pylint: disable=redefined-builtin

try:  # Python 2 / 3
    input = raw_input  # pylint: disable=raw_input-builtin
except NameError:
    pass
try:
    from subprocess import getoutput
except ImportError:
    from commands import getoutput

import subprocess
import logging
import logging.handlers
import os
import platform
import re
import socket
import sys
import datetime
import locale
import functools
import glob

# archiver addendum 1
flame_after_session_archiver = "/opt/Autodesk/archive/flame_after_session_archiver.sh"



if sys.version_info[0] < 3:
    startproc = functools.partial(subprocess.Popen)
else:
    startproc = functools.partial(subprocess.Popen, encoding="latin-1")


# Global logger for the script
logger = None

# Constants
ENVVAR_APPFLAVOR = "START_APPLICATION_FLAVOUR"
ENVVAR_DLFLAVOR = "DL_FLAVOR"

VREF_TIMEOUT = 3

LOG_DIRECTORY = "/opt/Autodesk/log"

OSNAME = platform.system().upper()

QUIET_MESSAGES = os.environ.get("DL_NO_MESSAGES_DISPLAY", False)

IS_UB2BUILD = "True"

if OSNAME == "DARWIN":
    OSNAME = "MACOSX"

if OSNAME == "MACOSX":

    def appleScript(statements, scriptArgs):
        statements = (
            ["on run argv", '   tell application "System Events"', "      activate"]
            + statements
            + ["      return", "   end tell", "end run"]
        )
        args = ["osascript"]
        for statement in statements:
            args += ["-e", statement]
        args += scriptArgs
        os.execv("/usr/bin/osascript", args)

    def display(appName, message):
        if not QUIET_MESSAGES:
            script = [
                'display dialog item 1 of argv buttons {"Quit"} default button 1'
                '   with title "' + appName + '"'
            ]
            appleScript(script, [message])
        else:
            print(message)

    def showLog(logFile, appName, message):
        if not QUIET_MESSAGES:
            script = [
                "set answer to"
                "   display dialog item 1 of argv"
                '   buttons {"Quit", "Show Details"}'
                "   default button 2"
                '   with title "' + appName + '"',
                'if button returned of answer is "Show Details" then',
                '   if item 2 of argv is "Console" then',
                '      open path to application "Console"',
                "   else",
                "      open item 2 of argv",
                "   end if",
                "end if",
            ]
            appleScript(script, [message, logFile])
        else:
            print(message)

else:

    def display(appName, message):
        print(message)
        if not QUIET_MESSAGES:
            os.system('zenity --error --title=%s --text="%s"' % (appName, message))

    def showLog(logFile, appName, message):
        print(message)


def symlinkpath(pathname):
    """Return logical path (not physical) for pathname using Popen"""
    if pathname[0] == "/":
        return pathname
    return os.path.join(os.environ["PWD"], pathname)


##
# Detect current application's directory and store it in the
# right HOME environment variable.
# e.g.: /opt/Autodesk/smoke2010
# @return Path to the application's home directory
def initHomeDirectory():
    # Extract the current script directory
    scriptfile = symlinkpath(sys.argv[0])
    currentDir = os.path.dirname(scriptfile)
    if OSNAME == "MACOSX" and os.path.basename(currentDir) == "Resources":
        contentsDir = os.path.dirname(currentDir)
        appDir = os.path.dirname(contentsDir)
        currentDir = os.path.dirname(appDir)

    if not os.path.isabs(currentDir):
        currentDir = os.path.join(os.getcwd(), currentDir)
    currentDir = os.path.abspath(currentDir)

    # Remove bin directory from the path
    homeDirectory = os.path.dirname(currentDir)

    return homeDirectory


##
# @brief Get the application name and put them in the environment variables.
#
# Extract the application name from the environment variable. If the variable
# does not exist, the application name will be extract from the home directory.
# @param homeDirectory Path to the home directory of the application
# @return application name
def initAppName(homeDirectory):
    appname = None
    # Get appname from ENVVAR_APPFLAVOR environment variable
    if "ENVVAR_APPFLAVOR" in os.environ:
        appname = os.environ[ENVVAR_APPFLAVOR].lower()
        return appname

    # On macOS, get appname from name.app if script in resource folder
    if OSNAME == "MACOSX":
        scriptFullDir = os.path.dirname(sys.argv[0])
        scriptDir = os.path.basename(scriptFullDir)
        if scriptDir == "Resources":
            contentsDir = os.path.dirname(scriptFullDir)
            appDir = os.path.dirname(contentsDir)
            appname = os.path.basename(appDir).split(".app", 1)[0].lower()
            return appname

    # Get appname from the script name if not startApplication
    scriptName = os.path.basename(__file__)
    if not scriptName.startswith("startApplication"):
        regname = re.match(r"start(.+?)(_|$)", scriptName)
        if regname:
            appname = regname.group(1).lower()
            return appname

    # Get appname from current path if not FlameFamily
    homename = os.path.basename(homeDirectory)
    if "_" in homename:
        appname = homename.split("_", 1)[0].lower()
        if "flamefamily" not in appname:
            appfile = os.path.join(homeDirectory, "bin", appname)
            if os.path.isfile(appfile):
                return appname

    # Get appname by listing possible choice and taking first one.
    files = glob.glob(os.path.join(homeDirectory, "bin", "fla*"))
    files.sort()
    for afile in files:
        if os.path.isfile(afile) and os.access(afile, os.X_OK):
            appname = os.path.basename(afile)
            return appname
        elif os.path.isdir(os.path.join(afile, "Contents", "MacOS")):
            appname = os.path.basename(afile).split(".app", 1)[0].lower()
            return appname

    print("ERROR: No application found")
    sys.exit(1)


##
# @brief Get the application version.
#
# Extract the application version name
# @param homeDirectory Path to the home directory of the application
# @return application version
def initAppVersion(homeDirectory, appName):

    # Extract the application version
    versionFilePath = os.path.join(homeDirectory, "VERSION")
    if not os.access(versionFilePath, os.R_OK):
        display(
            appName,
            "Unable to find or open application's version file : %s." % versionFilePath,
        )
        sys.exit(1)

    versionFile = open(versionFilePath, "r")
    version = versionFile.readline()
    versionFile.close()

    reVersion = re.compile(r'#define VERSION "(?P<version>.*)"')
    versionMatch = reVersion.match(version)
    if not versionMatch:
        display(appName, "ERROR: Unable to extract product's version.")
        sys.exit(1)

    return versionMatch.groupdict()["version"]


##
# @brief Contructs vref full path
def getVrefPath(homeDirectory):
    vRefPath = ""
    if len(homeDirectory.split("build.output")) > 1:
        vRefPath = os.path.dirname(homeDirectory) + "/standalone/toolsbin/"
    else:
        vRefPath = "/opt/Autodesk/io/bin/"
    vRefPath += "vref"
    return vRefPath


##
# @brief Allow root local applications like DLmpd to display X applications
def setDisplayPermissions():
    status = -1
    xhost = "/usr/bin/X11/xhost"
    if not os.access(xhost, os.X_OK):
        # On RHEL5 and more recent, xhost changed location.
        xhost = "/usr/bin/xhost"
    if os.access(xhost, os.X_OK):
        xhostcmd = [xhost, "+local:"]
        child = subprocess.Popen(
            xhostcmd, stdout=open("/dev/null", "w"), stderr=subprocess.STDOUT
        )
        status = child.wait()

    if status != 0:
        logger.warning(
            "WARNING: Unable to allow root local application to display X applications"
        )


##
# @brief Save old screen saver state and disable it
# @param appname Name of the application
# @return Old screen saver state
def disableScreenSaver(appname):
    dcopserverUser = getDcopserverUser()
    # Check if the current user can stop the screen saver
    ssEnabled = False
    if dcopserverUser == str(os.getuid()) and os.access("/usr/bin/dcop", os.X_OK):
        # Check if the screen saver is enabled
        strSSEnabled = getoutput("/usr/bin/dcop kdesktop KScreensaverIface isEnabled")
        if strSSEnabled == "true":
            ssEnabled = True

        # Disable the screen saver
        if ssEnabled:
            changeScreenSaver(False)
    else:
        logger.warning("")
        logger.warning("WARNING: Unable to disable screen saver.")
        logger.warning(
            "WARNING: Not using KDE, or not running %s as current KDE user." % appname
        )
        logger.warning("")

    return ssEnabled


##
# @brief Extract the user id for the dcopserver process
def getDcopserverUser():
    if not os.access("/proc", os.R_OK):
        return ""

    uid = ""
    reUser = re.compile(r"^Uid:\s+(?P<uid>\d+)", re.MULTILINE)
    for procDir in os.listdir("/proc"):
        procPath = os.path.join("/proc", procDir)
        cmdPath = os.path.join(procPath, "cmdline")
        statusPath = os.path.join(procPath, "status")
        if (
            procDir.isdigit()
            and os.access(cmdPath, os.R_OK)
            and os.access(statusPath, os.R_OK)
        ):
            cmdFile = open(cmdPath, "r")
            cmdContent = cmdFile.read()
            cmdFile.close()

            if cmdContent.find("dcopserver") != -1:
                statFile = open(statusPath, "r")
                statContent = statFile.read()
                statFile.close()

                m = reUser.search(statContent)
                if m:
                    uid = m.groupdict()["uid"]
                    break
    return uid


##
# @brief Change the screen saver state
# @param enable New state for the screen saver
def changeScreenSaver(enable):
    if os.access("/usr/bin/dcop", os.X_OK):
        enableString = "false"
        if enable:
            enableString = "true"
        changeScreen = [
            "/usr/bin/dcop",
            "kdesktop",
            "KScreensaverIface",
            "enable %s" % enableString,
        ]
        child = subprocess.Popen(
            changeScreen, stdout=open("/dev/null", "w"), stderr=subprocess.STDOUT
        )
        child.wait()


##
# @brief Prepare the application launch and launch them
#
# Create the program name and path and check if the command can be executed.
# Check if vref can be run with the application.
# @param homeDirectory Home directory of the application (/opt/Autodesk/<appnameversion>)
# @param appName Name of the application to execute
# @return exit status of the application
def runApplication(homeDirectory, appName):
    if OSNAME == "MACOSX":
        programName = "%s.app/Contents/MacOS/%s" % (appName, appName)
    else:
        programName = appName

    programPath = os.path.join(homeDirectory, "bin", programName)

    exitStatus = None
    if not os.access(programPath, os.X_OK):
        logger.error("")
        logger.error("ERROR: Executable not found: %s" % programPath)
        logger.error("")

        exitStatus = 256  # 256 will be convert to 1 using os.WEXITSTATUS
    else:
        vrefPath = initVref(homeDirectory)
        exitStatus = startApplication(programPath, vrefPath)

    # archiver addendum 2
    print("\n" * 5)
    if os.path.isfile(flame_after_session_archiver):
    # Use subprocess.call to run the bash script and wait for it to finish
    	result = subprocess.call(['bash', flame_after_session_archiver])
    else:
    	print("Archival script not found at $flame_after_session_archiver.")
    return exitStatus


##
# @brief Start the application and add the vref command if needed.
#
# All arguments passed to the start script will be add to the command line.
# @param programPath path to the application
# @param vrefPath vref path to use while running the application
# @return exit status of the application
def startApplication(programPath, vrefPath):
    prefix = ""
    if IS_UB2BUILD and "ARM64" in os.uname()[3]:
        force_arch = os.environ.get("DL_FORCE_ARCH", None)
        if force_arch is not None:
            # Force a specific architecture if DL_FORCE_ARCH is set
            if force_arch in ["arm64", "x86_64"]:
                prefix = "arch -%s " % force_arch
            else:
                logger.warning(
                    "WARNING: Invalid architecture specified through DL_FORCE_ARCH: %s\n"
                    "         Must be either arm64 or x86_64" % force_arch
                )
        if not prefix:
            # Use the native architecture (arm64 on Apple Silicon)
            # by default even if started from a x86_64 process ( ex: FPTR Desktop )
            # if the script is not located in <APP>.app/Contents/Resources
            # This will allow the application to follow what the user specified
            # (Get Info -> Open using Rosetta check) when starting the application
            # with the icon.
            scriptFullDir = os.path.dirname(sys.argv[0])
            scriptDir = os.path.basename(scriptFullDir)
            if scriptDir != "Resources":
                prefix = "arch -arm64 "

    # Start
    execString = "%s%s %s" % (
        prefix,
        programPath,
        " ".join(['"%s"' % arg for arg in sys.argv[1:]]),
    )
    exitStatus = exec_cmd_redirect_output(execString, vrefPath)
    return exitStatus


##
# @brief Create the logger instance
#
# Two handler will be create, a stream handler on stdout and a file handler
# to output logs in a file. The log file will be automatically rotate and
# a maximum of 100 files can exist.
# @param appDisplayVersion Version of the application to execute
# @param appName Name of the application to execute
def createLogger(appDisplayVersion, appName):
    global logger
    global logFile

    appVersion = appDisplayVersion.replace(".", "")

    # Create the log file name
    logFileName = "%s%s_%s_shell" % (
        appName,
        appVersion,
        socket.gethostname().split(".")[0],
    )
    if os.environ.get("DL_DATE_TIME_LOGS") in ["true", "1"]:
        logFileName += datetime.datetime.now().strftime(".%y_%m_%d__%H_%M_%S")
    logFileName += ".log"
    logFile = os.path.join(LOG_DIRECTORY, logFileName)

    # Get the logger
    logger = logging.getLogger("%s%s" % (appName, appVersion))

    logger.setLevel(logging.DEBUG)

    streamFormatter = logging.Formatter("%(message)s")
    fileFormatter = logging.Formatter("%(asctime)s : %(message)s", "%b %d %H:%M:%S")

    # Create Stream handler
    streamHandler = logging.StreamHandler(sys.stdout)
    streamHandler.setLevel(logging.DEBUG)
    streamHandler.setFormatter(streamFormatter)
    logger.addHandler(streamHandler)

    # Check if log file already exist
    logAlreadyExist = os.path.exists(logFile)
    # Create File handler
    try:
        if logAlreadyExist:
            # As shell log may not belong to us and RotatingFileHandler requires
            # that log be writable, let's temporarily rename it just to avoid
            # the thrown exception.
            os.rename(logFile, logFile + ".moving")

        fileHandler = logging.handlers.RotatingFileHandler(logFile, "a", 0, 100)

        if logAlreadyExist:
            # Rename it back. doRollover() call below can rotate logs even
            # if they don't belong to us.
            os.rename(logFile + ".moving", logFile)
    except IOError:
        logger.error("")
        logger.error("ERROR: Unable to create shell log file")
        logger.error("ERROR: Permission denied: '%s'" % logFile)
        logger.error("ERROR: Please delete existing shell log files manually")
        logger.error("")
        showLog("Console", appName, "Error creating shell log file.")
        sys.exit(1)

    fileHandler.setLevel(logging.DEBUG)
    fileHandler.setFormatter(fileFormatter)
    logger.addHandler(fileHandler)

    # Rotate log files if the file already exist
    if logAlreadyExist:
        try:
            fileHandler.doRollover()
        except IOError:
            logger.error("")
            logger.error("ERROR: Unable to rotate log files")
            logger.error("ERROR: Please delete existing shell log files manually")
            logger.error("")
            showLog("Console", appName, "Error creating log file.")
            sys.exit(1)


##
# @brief Setup to run with vref
#
# Check if there's a .no_vref file in the home directory and
# if vref exist and can be run.
# @param homeDirectory Path to the application's home directory
# @return vref path if the application can be run with vref, None otherwise
def initVref(homeDirectory):
    noVrefPath = os.path.join(homeDirectory, ".no_vref")
    vrefPath = getVrefPath(homeDirectory)
    if not os.path.exists(noVrefPath) and os.access(vrefPath, os.X_OK):
        return vrefPath
    else:
        return None


def runTrialDialog(homeDirectory, exitStatus):
    trialDiagBin = os.path.join(
        homeDirectory, "bin/TrialExpiredDialog.app/Contents/MacOS/trialExpiredDialog"
    )

    if os.access(trialDiagBin, os.X_OK):
        trialcmd = [trialDiagBin, exitStatus]
        childLic = subprocess.Popen(trialcmd)
        status = childLic.wait()
        if status != 0:
            logger.error("ERROR: Error running the trial dialog")
    else:
        logger.error("ERROR: Unable to execute the trial dialog")


##
# @brief Execute a command capturing its output and redirecting it to output_fds.
# @param cmd Command to execute.
# @param vrefPath vref path to start
# @return Exit status of the runned command.
def exec_cmd_redirect_output(cmd, vrefPath):

    # Starting vref
    if vrefPath != None:
        # Set VREF's environment variable
        os.environ["DL_WD_DBG_VREF"] = "1"
        cmd = "%s 2>&1 | %s" % (cmd, vrefPath)

    # Starting the application
    child = startproc(
        cmd,
        shell=True,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        bufsize=1,
        universal_newlines=True,
    )

    try:
        # While the application is running
        line = child.stdout.readline()
        while line != "":
            logger.info(line.rstrip())
            line = child.stdout.readline()

    except KeyboardInterrupt:
        pass

    exitStatus = child.wait()

    # Print content of gdb log file (if any)
    gdbLogName = "/var/tmp/ifffs_gdb_log.%d" % child.pid
    if os.access(gdbLogName, os.R_OK):
        gdbLog = open(gdbLogName, "r")
        print("Found a debugger log file: %s" % gdbLogName)
        print("--------------------------------------------------------------------")
        print(gdbLog.read())
        gdbLog.close()

    return exitStatus


##
# @brief Main method of the startApplication script
#
# - Extract the home directory
# - Extract the application name
# - Erase old licensing script
# - Disable screen saver
# - Start the application
# - Enable the screen saver if needed
# - Print a press ENTER to continue if needed
# - Exit with the exit status
def main():

    homeDirectory = initHomeDirectory()
    appname = initAppName(homeDirectory)
    os.environ[ENVVAR_DLFLAVOR] = appname
    appversion = initAppVersion(homeDirectory, appname)

    baseDir = "/opt/Autodesk"
    oldBaseDir = "/usr/discreet"

    if baseDir != oldBaseDir:
        if baseDir in homeDirectory:
            swbaseDir = os.path.join(baseDir, "sw")
            swoldBaseDir = os.path.join(oldBaseDir, "sw")
            if os.path.isdir(swbaseDir):
                baseInode = os.stat(swbaseDir).st_ino
            else:
                baseInode = 0

            if os.path.isdir(swoldBaseDir):
                oldBaseInode = os.stat(swoldBaseDir).st_ino
            else:
                oldBaseInode = 0

            if oldBaseInode != 0 and baseInode != 0 and oldBaseInode != baseInode:
                display(
                    appname,
                    (
                        "\nApplication cannot start, %s and %s\n"
                        "exist and do not point to the same location.\n"
                        % (swbaseDir, swoldBaseDir)
                    ),
                )
                sys.exit(1)

    civersionFilePath = "/usr/local/autodesk/centralinstall/VERSION"
    if os.access(civersionFilePath, os.R_OK):
        civersionFile = open(civersionFilePath, "r")
        civersion = civersionFile.readline().strip()
        civersionFile.close()
        if appversion != civersion:
            display(
                appname,
                (
                    "\nApplication cannot start, a Central Install session is open.\n\n"
                    "To close it, use the following command:\n\n"
                    "/usr/local/autodesk/centralinstall/close\n"
                ),
            )
            sys.exit(1)

    createLogger(appversion, appname)

    # The default limit of file descriptor opened per process is 1024 on linux
    # and 256 on mac. Upgrading beyond 1024 might cause problems since some
    # libraries used by the application and its services use select() calls
    # that are not safe with file descriptor over id 1023.
    #
    # Adjust the DL_FDS_LIMIT value below if you see the following warning:
    #
    #   Warning: deprecated select() system function called.
    #   Limiting number of file descriptor to 1024 might be necessary.
    #
    if "DL_FDS_LIMIT" not in os.environ:
        os.environ["DL_FDS_LIMIT"] = "4096"

    # FLME-54341
    try:
        lang, _ = locale.getlocale()
        if lang:
            os.environ["LC_CTYPE"] = lang + ".UTF-8"
        else:
            os.environ["LC_CTYPE"] = "en_US.UTF-8"
    except BaseException as e:
        logger.warning("getlocale: %s" % e)
        os.environ["LC_CTYPE"] = "en_US.UTF-8"

    try:
        envPath = os.path.join(baseDir, "cfg", "env.cfg")
        with open(envPath, "r") as envFile:
            reComment = re.compile(r"^[ \t]*#.*$")
            reKey = re.compile(r"^[A-Za-z_][A-Za-z0-9_]*$")
            try:
                for line in envFile:
                    if reComment.match(line):
                        continue
                    try:
                        key, value = [name.strip() for name in line.split("=", 1)]
                        if reKey.match(key):
                            if len(value) == 0:
                                os.unsetenv(key)
                            else:
                                os.environ[key] = value
                        else:
                            logger.warning("Invalid key '%s' in '%s'" % (key, envPath))
                    except:
                        logger.warning(
                            "Invalid line '%s' in '%s' ignored"
                            % (line.strip(), envPath)
                        )
                        continue
            except BaseException as e:
                logger.warning("reading '%s': %s" % (envPath, e))
    except:
        # Would ideally log the exception but don't want it to show up in the
        # terminal since it is generally normal to step in here.
        logger.info("Parsing '%s' skipped" % envPath)

    umask = 000
    umaskPath = os.path.join(baseDir, "cfg", "umask.cfg")
    try:
        if os.access(umaskPath, os.R_OK):
            child = subprocess.Popen(
                "egrep '^ *[0-7]+ *(#+.*$|$)' %s | tr -c -d '[0-7]'" % umaskPath,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
            )
            line = child.stdout.readline().strip()
            umask = int(line, 8)
            child.wait()
    except IOError:
        pass
    except ValueError:
        print("Invalid umask '%s' in %s." % (line, umaskPath))
    os.umask(umask)

    GNOMESETTINGS_SCRIPT = homeDirectory + "/bin/res/gnomeEnv_centos8/gnomesetting.py"
    PID = os.getpid()

    if OSNAME == "LINUX":
        os.system("%s -b %d" % (GNOMESETTINGS_SCRIPT, PID))  # backup current settings
        os.system("%s -a %d" % (GNOMESETTINGS_SCRIPT, PID))  # apply flame settings

    exitStatus = runApplication(homeDirectory, appname)

    if OSNAME == "LINUX":
        os.system("%s -r %d" % (GNOMESETTINGS_SCRIPT, PID))  # restore original settings

    if os.WIFEXITED(exitStatus) and os.WEXITSTATUS(exitStatus) == 99:
        if OSNAME == "MACOSX" and (appname in ("flame", "flameassist", "flare")):
            PRODUCTVERSION_FLAME = "2025.0.0.F"
            PRODUCTVERSION = PRODUCTVERSION_FLAME
            display(
                appname,
                (
                    "Please ensure that your license server is running and configured with a valid license.\n\n"
                    "If you want to set or change the license server to use, edit the license file.  \nExample :\n"
                    "/Library/Application Support/Autodesk/CLM/LGS/<PRODUCT_KEY>"
                    + "_"
                    + PRODUCTVERSION
                    + "/LICPATH.lic"
                ),
            )
        elif OSNAME == "LINUX" and (appname in ("flame", "flameassist", "flare")):
            display(
                appname,
                (
                    "Please ensure that your license server is running and configured with a valid license.\n\n"
                    "If you want to set or change the license server to use, edit the following license file :\n"
                    "/var/flexlm/flamefamily.lic"
                ),
            )

    elif (
        OSNAME == "MACOSX"
        and os.WIFEXITED(exitStatus)
        and os.WEXITSTATUS(exitStatus) in [97, 98]
    ):
        runTrialDialog(homeDirectory, os.WEXITSTATUS(exitStatus))
    elif not os.WIFEXITED(exitStatus) or os.WEXITSTATUS(exitStatus) != 0:
        showLog(logFile, appname, "Application exited abnormally.")

    if OSNAME == "LINUX":
        # Wait for the user to press ENTER before closing the shell window
        if os.path.basename(sys.argv[0]) == "startApplication_icon":
            input("press ENTER to continue")

    if os.WIFEXITED(exitStatus):
        sys.exit(os.WEXITSTATUS(exitStatus))
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
#test

